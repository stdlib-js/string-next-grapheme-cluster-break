{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar codePointAt = require( '@stdlib/string-code-point-at' );\nvar hasUTF16SurrogatePairAt = require( '@stdlib/assert-has-utf16-surrogate-pair-at' );\nvar grapheme = require( '@stdlib/string-tools-grapheme-cluster-break' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar breakType = grapheme.breakType;\nvar breakProperty = grapheme.breakProperty;\nvar emojiProperty = grapheme.emojiProperty;\n\n\n// MAIN //\n\n/**\n* Returns the next extended grapheme cluster break in a string after a specified position.\n*\n* @param {string} str - input string\n* @param {integer} [fromIndex=0] - position\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @returns {NonNegativeInteger} next grapheme break position\n*\n* @example\n* var out = nextGraphemeClusterBreak( 'last man standing', 4 );\n* // returns 5\n*\n* @example\n* var out = nextGraphemeClusterBreak( 'presidential election', 8 );\n* // returns 9\n*\n* @example\n* var out = nextGraphemeClusterBreak( '\u0905\u0928\u0941\u091A\u094D\u091B\u0947\u0926', 1 );\n* // returns 3\n*\n* @example\n* var out = nextGraphemeClusterBreak( '\uD83C\uDF37' );\n* // returns -1\n*/\nfunction nextGraphemeClusterBreak( str, fromIndex ) {\n\tvar breaks;\n\tvar emoji;\n\tvar len;\n\tvar idx;\n\tvar cp;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tidx = fromIndex;\n\t} else {\n\t\tidx = 0;\n\t}\n\tlen = str.length;\n\tif ( idx < 0 ) {\n\t\tidx += len;\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t}\n\t}\n\tif ( len === 0 || idx >= len ) {\n\t\treturn -1;\n\t}\n\t// Initialize caches for storing grapheme break and emoji properties:\n\tbreaks = [];\n\temoji = [];\n\n\t// Get the code point for the starting index:\n\tcp = codePointAt( str, idx );\n\n\t// Get the corresponding grapheme break and emoji properties:\n\tbreaks.push( breakProperty( cp ) );\n\temoji.push( emojiProperty( cp ) );\n\n\t// Begin searching for the next grapheme cluster break...\n\tfor ( i = idx+1; i < len; i++ ) {\n\t\t// If the current character is part of a surrogate pair, move along...\n\t\tif ( hasUTF16SurrogatePairAt( str, i-1 ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Get the next code point:\n\t\tcp = codePointAt( str, i );\n\n\t\t// Get the corresponding grapheme break and emoji properties:\n\t\tbreaks.push( breakProperty( cp ) );\n\t\temoji.push( emojiProperty( cp ) );\n\n\t\t// Determine if we've encountered a grapheme cluster break...\n\t\tif ( breakType( breaks, emoji ) > 0 ) {\n\t\t\t// We've found a break!\n\t\t\treturn i;\n\t\t}\n\t}\n\t// Unable to find a grapheme cluster break:\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nextGraphemeClusterBreak;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the next extended grapheme cluster break in a string after a specified position.\n*\n* @module @stdlib/string-next-grapheme-cluster-break\n*\n* @example\n* var nextGraphemeClusterBreak = require( '@stdlib/string-next-grapheme-cluster-break' );\n*\n* var out = nextGraphemeClusterBreak( '\u0905\u0928\u0941\u091A\u094D\u091B\u0947\u0926', 1 );\n* // returns 3\n*\n* out = nextGraphemeClusterBreak( '\uD83C\uDF37', 0 );\n* // returns -1\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAc,QAAS,8BAA+B,EACtDC,EAA0B,QAAS,4CAA6C,EAChFC,EAAW,QAAS,6CAA8C,EAClEC,EAAS,QAAS,uBAAwB,EAK1CC,EAAYF,EAAS,UACrBG,EAAgBH,EAAS,cACzBI,EAAgBJ,EAAS,cA8B7B,SAASK,EAA0BC,EAAKC,EAAY,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACjB,EAAUU,CAAI,EACnB,MAAM,IAAI,UAAWL,EAAQ,kEAAmEK,CAAI,CAAE,EAEvG,GAAK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACT,EAAWU,CAAU,EAC1B,MAAM,IAAI,UAAWN,EAAQ,qEAAsEM,CAAU,CAAE,EAEhHI,EAAMJ,CACP,MACCI,EAAM,EASP,GAPAD,EAAMJ,EAAI,OACLK,EAAM,IACVA,GAAOD,EACFC,EAAM,IACVA,EAAM,IAGHD,IAAQ,GAAKC,GAAOD,EACxB,MAAO,GAcR,IAXAF,EAAS,CAAC,EACVC,EAAQ,CAAC,EAGTG,EAAKd,EAAaQ,EAAKK,CAAI,EAG3BH,EAAO,KAAML,EAAeS,CAAG,CAAE,EACjCH,EAAM,KAAML,EAAeQ,CAAG,CAAE,EAG1BC,EAAIF,EAAI,EAAGE,EAAIH,EAAKG,IAEzB,GAAK,CAAAd,EAAyBO,EAAKO,EAAE,CAAE,IAIvCD,EAAKd,EAAaQ,EAAKO,CAAE,EAGzBL,EAAO,KAAML,EAAeS,CAAG,CAAE,EACjCH,EAAM,KAAML,EAAeQ,CAAG,CAAE,EAG3BV,EAAWM,EAAQC,CAAM,EAAI,GAEjC,OAAOI,EAIT,MAAO,EACR,CAKAlB,EAAO,QAAUU,IC7FjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "isInteger", "codePointAt", "hasUTF16SurrogatePairAt", "grapheme", "format", "breakType", "breakProperty", "emojiProperty", "nextGraphemeClusterBreak", "str", "fromIndex", "breaks", "emoji", "len", "idx", "cp", "i", "main"]
}
