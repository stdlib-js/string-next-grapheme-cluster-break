{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport codePointAt from '@stdlib/string-code-point-at';\nimport hasUTF16SurrogatePairAt from '@stdlib/assert-has-utf16-surrogate-pair-at';\nimport grapheme from '@stdlib/string-tools-grapheme-cluster-break';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar breakType = grapheme.breakType;\nvar breakProperty = grapheme.breakProperty;\nvar emojiProperty = grapheme.emojiProperty;\n\n\n// MAIN //\n\n/**\n* Returns the next extended grapheme cluster break in a string after a specified position.\n*\n* @param {string} str - input string\n* @param {integer} [fromIndex=0] - position\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @returns {NonNegativeInteger} next grapheme break position\n*\n* @example\n* var out = nextGraphemeClusterBreak( 'last man standing', 4 );\n* // returns 5\n*\n* @example\n* var out = nextGraphemeClusterBreak( 'presidential election', 8 );\n* // returns 9\n*\n* @example\n* var out = nextGraphemeClusterBreak( 'अनुच्छेद', 1 );\n* // returns 3\n*\n* @example\n* var out = nextGraphemeClusterBreak( '🌷' );\n* // returns -1\n*/\nfunction nextGraphemeClusterBreak( str, fromIndex ) {\n\tvar breaks;\n\tvar emoji;\n\tvar len;\n\tvar idx;\n\tvar cp;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tidx = fromIndex;\n\t} else {\n\t\tidx = 0;\n\t}\n\tlen = str.length;\n\tif ( idx < 0 ) {\n\t\tidx += len;\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t}\n\t}\n\tif ( len === 0 || idx >= len ) {\n\t\treturn -1;\n\t}\n\t// Initialize caches for storing grapheme break and emoji properties:\n\tbreaks = [];\n\temoji = [];\n\n\t// Get the code point for the starting index:\n\tcp = codePointAt( str, idx );\n\n\t// Get the corresponding grapheme break and emoji properties:\n\tbreaks.push( breakProperty( cp ) );\n\temoji.push( emojiProperty( cp ) );\n\n\t// Begin searching for the next grapheme cluster break...\n\tfor ( i = idx+1; i < len; i++ ) {\n\t\t// If the current character is part of a surrogate pair, move along...\n\t\tif ( hasUTF16SurrogatePairAt( str, i-1 ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Get the next code point:\n\t\tcp = codePointAt( str, i );\n\n\t\t// Get the corresponding grapheme break and emoji properties:\n\t\tbreaks.push( breakProperty( cp ) );\n\t\temoji.push( emojiProperty( cp ) );\n\n\t\t// Determine if we've encountered a grapheme cluster break...\n\t\tif ( breakType( breaks, emoji ) > 0 ) {\n\t\t\t// We've found a break!\n\t\t\treturn i;\n\t\t}\n\t}\n\t// Unable to find a grapheme cluster break:\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default nextGraphemeClusterBreak;\n"],"names":["breakType","grapheme","breakProperty","emojiProperty","nextGraphemeClusterBreak","str","fromIndex","breaks","emoji","len","idx","cp","i","isString","TypeError","format","arguments","length","isInteger","codePointAt","push","hasUTF16SurrogatePairAt"],"mappings":";;umBAgCA,IAAIA,EAAYC,EAASD,UACrBE,EAAgBD,EAASC,cACzBC,EAAgBF,EAASE,cA8B7B,SAASC,EAA0BC,EAAKC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUR,GACf,MAAM,IAAIS,UAAWC,EAAQ,kEAAmEV,IAEjG,GAAKW,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAWZ,GAChB,MAAM,IAAIQ,UAAWC,EAAQ,qEAAsET,IAEpGI,EAAMJ,CACR,MACEI,EAAM,EASP,GAPAD,EAAMJ,EAAIY,OACLP,EAAM,IACVA,GAAOD,GACI,IACVC,EAAM,GAGK,IAARD,GAAaC,GAAOD,EACxB,OAAQ,EAcT,IAXAF,EAAS,GACTC,EAAQ,GAGRG,EAAKQ,EAAad,EAAKK,GAGvBH,EAAOa,KAAMlB,EAAeS,IAC5BH,EAAMY,KAAMjB,EAAeQ,IAGrBC,EAAIF,EAAI,EAAGE,EAAIH,EAAKG,IAEzB,IAAKS,EAAyBhB,EAAKO,EAAE,KAIrCD,EAAKQ,EAAad,EAAKO,GAGvBL,EAAOa,KAAMlB,EAAeS,IAC5BH,EAAMY,KAAMjB,EAAeQ,IAGtBX,EAAWO,EAAQC,GAAU,GAEjC,OAAOI,EAIT,OAAQ,CACT"}